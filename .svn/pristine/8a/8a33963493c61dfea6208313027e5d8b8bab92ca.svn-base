using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace checkmod
{
    class Header
    {

        // Длина кадра конфигурации
        public static int LenFrameConfig = 60000;

        // Порт Приложения
        public static int Port = 43021;

        // Порт Приложения (Мультикаст)
        public static int PortMulti = 43100;
    }

    // Типы меток времени
    public enum TimeTypeNum : byte
    {
        /* tNone = 0,          *//* Метка времени отсутствует *//*

         tCP24 = 1,          *//* Метка времени выдается в формате CP24Время2a, 3 байта *//*

         tTimeVal = 2,       *//* Метка времени выдается в формате Timeval (8 байт): 4 младших байта – время относительно начала 1970 года в секундах,
                             4 старших байта – значение в микросекундах относительно начала секунд *//*

         tCP32 = 3,          *//* Метка времени выдается в формате CP32Время2a (4 байта): время в 10-ти миллисекундных тиках относительно начала года *//*

         tGPS = 4,           *//* Метка времени выдается в формате GPS (8 байт): 6 байт – метка GPS 
                             (4 младших байта – секунды относительно начала недели + 2 байта – количество недель относительно 6 января 1980 года)
                             и 2 байта – значение в миллисекундах относительно начала секунд *//*

         tCP56 = 5,          *//* Метка времени выдается в формате CP56Время2a 7 байт *//*

         tNMEA = 6,          *//* Метка времени выдается в формате NMEA 8 байт *//*

         tmsTimeVal = 7,     *//* Метка времени выдается в формате Timeval+msek 10 байт */

        tTimespec = 8       /* Метка времени выдается в формате Timespec 8 байт; 4 младших байта – время относительно начала 1970 года в секундах,
                            4 старших байта – значение в наносекундах относительно начала секунд */
    }

    // Результат
    public enum ResultNum : byte
    {
        Ok = 0,             /* Идентификация принята */
        irNoConf = 1,       /* Идентификация принята, но конфигурация отсутствует */
        ErrPosition = 2,    /* Несоответствие позиции устройства */
        ErrVariation = 3,   /* Несоответствие исполнения устройства */
        ErrSoftVers = 4,    /* Несоответствие версий ПО */
        ErrHardVers = 5,    /* Несоответствие аппаратной версии */
    }

    // Список команд
    public enum ListCommand : byte
    {
        WarmReset = 1,      /* Сброс текущего состояния исполнения на модулях и ЦПС */
        ColdReset = 2,      /* Сброс модуля и переход к процессу идентификации */
        Stop = 3,           /* Остановка работы модулей и ЦПС */
        Start = 4           /* Запуск работы модулей и ЦПС */
    }

    // Результат применения конфигурации и запуска модуля в работу
    public enum CategoryData : byte
    {
        сarOk = 0,           /* Конфигурация принята успешно, модуль перешел в работу */
        carError = 50        /* Ошибка применения конфигурации или запуска модуля. Диапазон 50-255 */
    }

    // Порядок идентификационных данных в коллекции
    public enum SeqIdentDataInCollect : byte
    {
        status = 0,
        position = 1,
        module_type = 2,
        modname = 3,
        progname = 4,
        variation = 5,
        softvers = 6,
        hardvers = 7,
        plantnum = 8
    }
}
