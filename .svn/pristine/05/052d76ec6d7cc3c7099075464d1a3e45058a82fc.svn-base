using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Net.Security;
using System.Windows.Threading;
using System.Timers;
using System.IO;
using System.Xml.Serialization;
using Microsoft.Data.Sqlite;
using System.Collections;
using System.Windows.Media;

namespace checkmod
{

    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window , INotifyPropertyChanged
    {

        #region INotifyPropertyChanged Members
        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropChanged(string propName)
        {
            if (this.PropertyChanged != null) this.PropertyChanged(this, new PropertyChangedEventArgs(propName));
        }
        #endregion // INotifyPropertyChanged Members
      
        Driver dr;
        Params param;
        public UdpClient client;
        Collect common_param = null;
        WorkWithBD workwithBD = new WorkWithBD();

        // Счетчик записей лога
        public byte cnt_rows_main;
        public byte tempr_cnt_rows_main;

        public bool flag_rows_main = true;

        private PLC _descriptions = new PLC();
        public PLC descriptions 
        {
            get { return _descriptions; }
            set { _descriptions = value; }
        }

        public bool forever = true;

        private ObservableCollection<Module> _collect = new ObservableCollection<Module>();
        public ObservableCollection<Module> collect 
        {
            get
            {
                return _collect;
            }

            set
            {
                _collect = value;
            }
        }

        public string log
        { 
            get;
            set;
        }

        public MainWindow()
        {
            InitializeComponent();
            MW.DataContext = this;

            ParsXML();
            ParsParamXML();

            dr = new Driver();
            dr.add_module_driver += AddModule;
            dr.handler_driver += RecReady;
            dr.data_driver += RecieveData;
            dr.event_lost_connect += LostConnect;
            dr.module_log += WriteModuleLog;

            // Создаем директорию с файлами конфигурации
            DirectoryInfo dirInfo = new DirectoryInfo(@".\Statistic");
            if (!dirInfo.Exists)
            {
                dirInfo.Create();
            }

            // Создаем поток и запускаем в нем функцию recieve
            Thread MultyThread = new Thread(new ThreadStart (dr.Recieve));
            MultyThread.Name = "main";
            MultyThread.Start();
        }

        public void LostConnect(IPEndPoint ip, bool connected)
        {
            if (collect.Count(x => x.ip.Address.ToString() == ip.Address.ToString()) == 1)
            {
                Module t = collect.Single(x => x.ip.Address.ToString() == ip.Address.ToString());

                if (connected)
                    Dispatcher.Invoke(delegate
                    {
                        t.color = Brushes.White;
                        t.color.Freeze();
                    });
                else 
                    Dispatcher.Invoke(delegate
                    {
                        t.color = Brushes.Red;
                        t.color.Freeze();
                    });
                OnPropChanged("collect");
            }
        }

        public void WriteModuleLog(byte[] data, IPEndPoint ip)
        {
            string mask, message;

            message = Encoding.ASCII.GetString(data, 1, data.Length - 1);

            switch (data[0])
            {
                case 1:
                    mask = "Событие";
                    break;
                case 2:
                    mask = "Предупреждение";
                    break;
                case 4:
                    mask = "Ошибка";
                    break;
                case 8:
                    mask = "Дамп приема";
                    break;
                case 16:
                    mask = "Дамп передачи";
                    break;
                case 32:
                    mask = "Трассировка";
                    break;
                case 64:
                    mask = "Пользовательские данные";
                    break;
                case 128:
                    mask = "Сервисные данные";
                    break;
                default:
                    mask = "";
                    break;
            }

            LogWrite("Module", message, mask, ip);
        }

        // Запись лога
        public void LogWrite(string device, string message, string mask, IPEndPoint ip = null)
        {
            Module m;
            string str;
            byte[] buf = null;
            long elapsedTicks;
            byte[] tempr = new byte[1000];

            // Метка времени, отсчет от 1 января 1970 года
            DateTime start_time = new DateTime(1970, 1, 1);

            // Текущее время
            DateTime current_time = DateTime.Now;

            // Количество тиков в промежуток с 1 января 1970 по настоящее время
            elapsedTicks = current_time.Ticks - start_time.Ticks;

            TimeSpan elapsedSpan;

            elapsedSpan = new TimeSpan(elapsedTicks);

            double ff = gr.ActualHeight;

            if (ip == null)
            {
                str = mask + ":    " + device + "    " + message + "    " + DateTime.Now.ToString() + "." + (elapsedTicks * 100 - (long)elapsedSpan.TotalSeconds * (long)Math.Pow(10, 9)).ToString() + "\n";
                tempr = Encoding.ASCII.GetBytes(str);
                buf = new byte[str.Length];
                Array.Copy(tempr, 0, buf, 0, tempr.Length);

                this.Dispatcher.Invoke((Action)delegate
                {
                    log += str;
                    
                });

                using (StreamWriter fStream = new StreamWriter("Log.txt", true))
                {
                    fStream.Write(str);
                    fStream.Close();
                }

                if (flag_rows_main)
                {
                    if (cnt_rows_main <= 5)
                        cnt_rows_main++;
                    else
                    {
                        this.Dispatcher.Invoke((Action)delegate
                        {
                            Log.Height = 100;
                            flag_rows_main = false;
                        });
                    }
                }

                OnPropChanged("log");
            }
            else if (collect.Count(x => x.ip.Address.ToString() == ip.Address.ToString()) == 1)
            {
                m = collect.Single(x => x.ip.Address.ToString() == ip.Address.ToString());

                str = mask + ":    " + device + "    " + m.header + "    " + message + "    " + DateTime.Now.ToString() + "." + (elapsedTicks * 100 - (long)elapsedSpan.TotalSeconds * (long)Math.Pow(10, 9)).ToString() + "\n";
                tempr = Encoding.ASCII.GetBytes(str);
                buf = new byte[str.Length];
                Array.Copy(tempr, 0, buf, 0, tempr.Length);
                this.Dispatcher.Invoke((Action)delegate
                {
                    log += str;
                    
                });

                using (StreamWriter fStream = new StreamWriter("Log.txt", true))
                {
                    fStream.Write(str);
                    fStream.Close();
                }

                if (flag_rows_main)
                {
                    foreach (Module i in collect)
                    {
                        tempr_cnt_rows_main += i.cnt_rows_module;
                    }

                    if (cnt_rows_main + tempr_cnt_rows_main <= 5)
                    { 
                        m.cnt_rows_module++;
                        tempr_cnt_rows_main = 0;
                    }
                    else
                    {
                        this.Dispatcher.Invoke((Action)delegate
                        {
                            Log.Height = 100;
                            flag_rows_main = false;
                        });
                        
                    }
                }

                OnPropChanged("log");
            }
            
        }

        private void ParsXML()
        {
            string message, mask;

            try
            {
                using (Stream fStream = new FileStream("Descriptions.xml", FileMode.Open, FileAccess.Read, FileShare.None))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(PLC));
                    descriptions = (PLC)serializer.Deserialize(fStream);
                    Helper.plc = descriptions;
                }
                mask = "Событие";
                message = "Дессириализация файла с модулями прошла успешно";
                LogWrite("Application", message, mask);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                Application.Current.MainWindow.Close();
            }
        }

        private void ParsParamXML()
        {
            string message, mask;

            try
            {
                using (Stream fStream = new FileStream("Descriptions_common_parameters.xml", FileMode.Open, FileAccess.Read, FileShare.None))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Collect));
                    common_param = (Collect)serializer.Deserialize(fStream);
                    ReinitCommonParam();
                    mask = "Событие";
                    message = "Дессириализация файла с параметрами прошла успешно";
                    LogWrite("Application", message, mask);
                }
            }
            catch (Exception ex)
            {
                mask = "Ошибка";
                message = "Дессириализация файла с модулями не пройдена";
                LogWrite("Application", message, mask);
                
                MessageBox.Show(ex.ToString());
                Application.Current.MainWindow.Close();
            }
        }

        private void ReinitCommonParam()
        {
            foreach (CollectParameter i in common_param.Parameter)
            {
                HeaderDriver._common_parameters.Add(new s_param(i.Name, int.Parse(i.Value), i.Measurement));
            }

            if (int.Parse(common_param.Parameter[6].Value) == 0)
                HeaderDriver.f_unable_infinite = true;
            else
                HeaderDriver.f_unable_infinite = false;
        }

        // Проверка версий на совместимость
        // 0 - Версии совпадают
        // 1 - Версии не совпадают по 4 октету
        // -1 - Версии не совпадают по 1 октету
        // -2 - Версии не совпадают по 2 октету 
        // -3 - Версии не совпадают по 3 октету
        private int CompareVers(string xml_vers, string ident_vers)
        {
            int count = 0;
            string message, mask;
            int[] xml = new int[4];
            int[] ident = new int[4];

            for (int i = 0; i <= 6; i++)
            {
                if ((char)xml_vers[i] != '.')
                {
                    xml[count] = (int)xml_vers[i];
                    ident[count] = (int)ident_vers[i];
                    count++;
                } 
            }

            if (xml[0] == ident[0])
                if (xml[1] == ident[1])
                    if (xml[2] >= ident[2])
                        if (xml[3] == ident[3])
                        {
                            return 0;
                        }    
                        else
                        {
                            mask = "Предупреждение";
                            message = "Версия ПО модуля не полностью совместима с версией приложения. Несовместимость по четвертому октету!";
                            // LogWrite("Application", message, mask);
                            return 1;
                        }    
                    else
                    {
                        mask = "Ошибка";
                        message = "Версия ПО модуля не совместима с версией приложения. Несовместимость по третьему октету!";
                        LogWrite("Application", message, mask);
                        return -3;
                    }
                else 
                {
                    mask = "Ошибка";
                    message = "Версия ПО модуля не совместима с версией приложения. Несовместимость по второму октету!";
                    LogWrite("Application", message, mask);
                    return -2;
                }    
            else
            {
                mask = "Ошибка";
                message = "Версия ПО модуля не совместима с версией приложения. Несовместимость по первому октету!";
                LogWrite("Application", message, mask);
                return -1;
            }
        }

        // Поиск и добавление модуля в колекцию, а также проверка нумерации и отправка кадра подтверждение
        int AddModule(byte[] data, IPEndPoint ip)
        {

            string message, mask;
            Module m = new Module(data, ip, dr);

            // Проверка есть ли модуль в XML файле
            for (int i = 0; i < descriptions.HWModules.Length; i++)
            {
                // Проверка на имя и исполнение
                if (m.pr.ident_collect[(byte)SeqIdentDataInCollect.modname].value == descriptions.HWModules[i].name &&
                    m.pr.ident_collect[(byte)SeqIdentDataInCollect.variation].value.Replace(" ", "") == descriptions.HWModules[i].implementation)
                {
                    // Проверка на версию (софт)
                    if (CompareVers(descriptions.HWModules[i].version, m.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value) == 0 ||
                        CompareVers(descriptions.HWModules[i].version, m.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value) == 1)

                        // Проверка нахождения модуля в колекции
                        if (collect.Count(x => x.ip.Address.ToString() == m.ip.Address.ToString()) == 1)
                        {
                            Module t = collect.Single(x => x.ip.Address.ToString() == m.ip.Address.ToString());

                            if ((t.pr.ident_collect[(byte)SeqIdentDataInCollect.status].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.status].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.module_type].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.module_type].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.modname].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.modname].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.progname].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.progname].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.variation].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.variation].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.hardvers].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.hardvers].value) &&
                                    (t.pr.ident_collect[(byte)SeqIdentDataInCollect.plantnum].value == m.pr.ident_collect[(byte)SeqIdentDataInCollect.plantnum].value))
                            {
                                workwithBD.WorkBD(descriptions, t, i);
                                LostConnect(t.ip, true);
                                OnPropChanged("collect");
                                return 0;
                            }
                            else
                            {
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.status].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.status].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.module_type].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.module_type].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.modname].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.modname].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.progname].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.progname].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.variation].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.variation].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.softvers].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.hardvers].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.hardvers].value;
                                t.pr.ident_collect[(byte)SeqIdentDataInCollect.plantnum].value = m.pr.ident_collect[(byte)SeqIdentDataInCollect.plantnum].value;
                                t.update_header();

                                workwithBD.WorkBD(descriptions, t, i);

                                mask = "Событие";
                                message = "Модуль в списке обнавлен";
                                LogWrite("Application", message, mask, m.ip);

                                LostConnect(t.ip, true);

                                OnPropChanged("collect");
                                return 1;
                            }
                        }
                        else
                        {
                            m.WriteInCollect(descriptions.HWModules[i]);

                            workwithBD.WorkBD(descriptions, m, i);

                            // Добавление модуля в коллекцию
                            this.Dispatcher.Invoke((Action)delegate
                            {
                                collect.Add(m);
                            });

                            mask = "Событие";
                            message = "Модуль добавлен в список";
                            LogWrite("Application", message, mask, m.ip);

                            OnPropChanged("collect");
                            return 1;
                        }
                }
            }
            return 0;
        }

        public void RecieveData(byte[] data, IPEndPoint ip)
        {
            if (collect.Count(x => x.ip.Address.ToString() == ip.Address.ToString()) == 1)
            {
                Module t = collect.Single(x => x.ip.Address.ToString() == ip.Address.ToString());

                if (t.block_send_data)
                    t.block_send_data = false;
                t.pr.sign.ParsData(data, t);
            }
        }

        // Метод обработки кадра готовности к работе
        public void RecReady(byte[] data, IPEndPoint ip)
        {
            if (collect.Count(x => x.ip.Address.ToString() == ip.Address.ToString()) == 1)
            {
                Module t = collect.Single(x => x.ip.Address.ToString() == ip.Address.ToString());
                if (t.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value == data[0].ToString())
                {
                    if (data[1] == (byte)CategoryData.сarOk)
                    {
                        t.ready_work = true;
                        LogWrite("Application", "Модуль готов к работе", "Событие", t.ip);
                    }
                    else
                    {
                        LogWrite("Application", String.Format("Модуль не готов к работе. Код ошибки: {0}", data[1].ToString()), "Ошибка", t.ip);
                        MessageBox.Show(String.Format("Модуль с ip: {0} не готов к работе. Код ошибки: {1}", ip.Address.ToString(), data[1].ToString()));
                    }

                }
                else
                { 
                    LogWrite("Application", String.Format("Позиция не совпадает. Позиция в идентификации: {0}, принятая позиция: {1}. ",
                    t.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value, data[1].ToString()), "Ошибка", t.ip);
                    MessageBox.Show(String.Format("Позиция не совпадает. Позиция в идентификации: {0}, принятая позиция: {1}. ",
                    t.pr.ident_collect[(byte)SeqIdentDataInCollect.position].value, data[1].ToString()));
                }
                    
            }
        }

        private void Send_Config(object sender, RoutedEventArgs e)
        {
            int res = 10;
            string mask, message;
            Module m = (Module)Tab.SelectedItem;
            if (m != null) 
                res = m.pr.conf.Send_param(m);
            if (res == 1)
            {
                mask = "Ошибка";
                message = "Не передан буфер данных";
                LogWrite("Application", message, mask, m.ip);
                MessageBox.Show("Не передан буфер данных");
            }
            else if (res == 2)
            {
                mask = "Ошибка";
                message = "Неверный IP";
                LogWrite("Application", message, mask, m.ip);
                MessageBox.Show("Неверный IP");
            }
            else if (res == 3)
            {
                mask = "Ошибка";
                message = "Не получено подтверждения принятия конфигурации";
                LogWrite("Application", message, mask, m.ip);
                //MessageBox.Show("Не получено подтверждение принятия конфигурации");
            }
            else if (res == 4)
            {
                mask = "Ошибка";
                message = "Отсутствует модуль в списке";
                LogWrite("Application", message, mask, m.ip);
                MessageBox.Show("Отсутствует модуль в списке");
            }
            else if (res == 0)
            {
                mask = "Событие";
                message = "Отправка конфигурации прошла успешно";
                LogWrite("Application", message, mask, m.ip);
            }
        }

        private void StartWork(object sender, RoutedEventArgs e)
        {
            int res;
            string mask, message;
            Module m = (Module)Tab.SelectedItem;
            if (m != null)
            {
                res = dr.SendCommand(true, (byte)ListCommand.Start, m.ip.Address.ToString());
                if (res == 1)
                {
                    mask = "Ошибка";
                    message = "Неверно введен IP";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Неверно введен IP");
                }
                else if (res == 2)
                {
                    mask = "Ошибка";
                    message = "Модуль был не идентифицирован";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль был не идентифицирован");
                }
                else if (res == 3)
                {
                    mask = "Ошибка";
                    message = "Модуль не подтвердил принятия команды 'Старт'";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль не подтвердил принятия команды 'Старт'");
                }
                else if (res == 0)
                {
                    mask = "Событие";
                    message = "Модуль подтвердил принятия команды 'Старт'";
                    LogWrite("Application", message, mask, m.ip);
                }
            }
        }

        private void StopWork(object sender, RoutedEventArgs e)
        {
            int res;
            string mask, message;
            Module m = (Module)Tab.SelectedItem;
            if (m != null)
            {
                res = dr.SendCommand(true, (byte)ListCommand.Stop, m.ip.Address.ToString());
                if (res == 1)
                {
                    mask = "Ошибка";
                    message = "Неверно введен IP";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Неверно введен IP");
                }
                else if (res == 2)
                {
                    mask = "Ошибка";
                    message = "Модуль был не идентифицирован";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль был не идентифицирован");
                }
                else if (res == 3)
                {
                    mask = "Ошибка";
                    message = "Модуль не подтвердил принятия команды 'Стоп'";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль не подтвердил принятия команды 'Стоп'");
                }
                else if (res == 0)
                {
                    mask = "Событие";
                    message = "Модуль подтвердил принятия команды 'Стоп'";
                    LogWrite("Application", message, mask, m.ip);
                }
            }
        }

        private void ColdReset(object sender, RoutedEventArgs e)
        {
            int res;
            string mask, message;
            Module m = (Module)Tab.SelectedItem;
            if (m != null)
            {
                res = dr.SendCommand(true, (byte)ListCommand.ColdReset, m.ip.Address.ToString());
                if (res == 1)
                {
                    mask = "Ошибка";
                    message = "Неверно введен IP";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Неверно введен IP");
                }
                else if (res == 2)
                {
                    mask = "Ошибка";
                    message = "Модуль был не идентифицирован";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль был не идентифицирован");
                }
                else if (res == 3)
                {
                    mask = "Ошибка";
                    message = "Модуль не подтвердил принятия команды 'Холодный сброс'";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль не подтвердил принятия команды 'Холодный сброс'");
                }
                else if (res == 0)
                {
                    mask = "Событие";
                    message = "Модуль подтвердил принятия команды 'Холодный сброс'";
                    LogWrite("Application", message, mask, m.ip);
                }
            }
        }

        private void WarmReset(object sender, RoutedEventArgs e)
        {
            int res;
            string mask, message;
            Module m = (Module)Tab.SelectedItem;
            if (m != null)
            {
                res = dr.SendCommand(true, (byte)ListCommand.WarmReset, m.ip.Address.ToString());
                if (res == 1)
                {
                    mask = "Ошибка";
                    message = "Неверно введен IP";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Неверно введен IP");
                }
                else if (res == 2)
                {
                    mask = "Ошибка";
                    message = "Модуль был не идентифицирован";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль был не идентифицирован");
                }
                else if (res == 3)
                {
                    mask = "Ошибка";
                    message = "Модуль не подтвердил принятия команды 'Горячий сброс'";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Модуль не подтвердил принятия команды 'Горячий сброс'");
                }
                else if (res == 0)
                {
                    mask = "Событие";
                    message = "Модуль подтвердил принятия команды 'Горячий сброс'";
                    LogWrite("Application", message, mask, m.ip);
                }
            }
        }

        /*****************************************************************/
        /*************             SendData             ******************/
        /*****************************************************************/
        private void SendData(object sender, RoutedEventArgs e)
        {
            byte size;
            int num = 0;
            byte[] rs, dt, arr;
            string arrors = null;
            bool f_empty_buf = false;
            byte[] data = new byte[1000];

            Module m = (Module)Tab.SelectedItem;
            if (m != null)
            {
                for (int i = 0; i < m.pr.in_signals.Count()-1; i++)
                {
                    // Уникальный идентификатор
                    rs = BitConverter.GetBytes(m.pr.in_signals[i].id);
                    Array.Copy(rs, 0, data, num, rs.Length);
                    num += rs.Length;

                    // Маска сигнала
                    data[num++] = (byte)1;

                    if (m.pr.in_signals[i].tempr != null)
                    {
                        f_empty_buf = true;

                        try
                        {
                            // Значение
                            //size = Helper.SizeOfType(m.pr.in_signals[i].data_type);
                            rs = m.pr.in_signals[i].SetValue();
                            size = (byte)rs.Length;
                            //Array.Copy(m.pr.in_signals[i].SetValue(), 0, rs, 0, m.pr.in_signals[i].SetValue().Length);
                            data[num++] = size; // Размер значения
                            Array.Copy(rs, 0, data, num, size);
                            num += size;
                        }
                        catch
                        {
                            arrors += "Неправильно задано значение сигналу " + m.pr.in_signals[i].name + "\n";
                        }
                    }
                    else
                    {
                        f_empty_buf = true;

                        // Значение

                        rs = m.pr.in_signals[i].SetValue();
                        size = (byte)rs.Length;

                        //size = Helper.SizeOfType(m.pr.in_signals[i].data_type);
                        //rs = new byte[size];
                        //arr = m.pr.in_signals[i].SetValue();
                        //Array.Copy(arr, 0, rs, 0, arr.Length);
                        data[num++] = size; // Размер значения
                        Array.Copy(rs, 0, data, num, size);
                        num += size;
                    }
                }

                if (f_empty_buf != true) return;

                if (arrors == null)
                    for (int i = 0; i < m.pr.in_signals.Count(); i++)
                    {
                        m.pr.in_signals[i].ClearTempr();
                    }
                else
                {
                    string mask = "Ошибка";
                    LogWrite("Application", arrors, mask, m.ip);
                    MessageBox.Show(arrors);
                    return;
                }

                rs = BitConverter.GetBytes(0);
                Array.Copy(rs, 0, data, num, rs.Length);
                num += rs.Length;

                dt = new byte[num];
                Array.Copy(data, 0, dt, 0, num);

                if (m.ThreadSendData != null)
                {
                    Driver.modules[m.ip.Address.ToString()].stop_send_data = false;
                    while (m.ThreadSendData.ThreadState != ThreadState.Stopped)
                        Thread.Sleep(10);
                    m.ThreadSendData = null;
                }

                m.ThreadSendData = new Thread(delegate () { SendDT(dt, m); });
                m.ThreadSendData.Name = "SendData";
                m.ThreadSendData.Start();
            }
        }

        public void SendDT(byte[] dt, Module m)
        {
            string mask, message;
            switch (dr.SendData(dt, m.ip.Address.ToString(), m.ip.Port))
            {
                case 0:
                    mask = "Событие";
                    message = "Данные отправлены";
                    LogWrite("Application", message, mask, m.ip);
                    break;
                case 1:
                    mask = "Ошибка";
                    message = "Не передан буфер данных";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Не передан буфер данных");
                    break;
                case 2:
                    mask = "Ошибка";
                    message = "Неверный IP";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Неверный IP");
                    break;
                case 3:
                    mask = "Ошибка";
                    message = "Не получено подтверждение принятия данных";
                    LogWrite("Application", message, mask, m.ip);
                    MessageBox.Show("Не получено подтверждение принятия данных");
                    break;
            }
        }

        /*****************************************************************/
        /*************               Start              ******************/
        /*****************************************************************/
        private void CommonStart(object sender, RoutedEventArgs e)
        {
            // Создаем поток и запускаем в нем функцию WarmReset
            Thread StartThread = new Thread(new ThreadStart(Start));
            StartThread.Name = "Start";
            StartThread.Start();
        }

        private void Start()
        {
            int res;
            string mask, message;

            res = dr.SendCommand(false, (byte)ListCommand.Start);
            if (res == 1)
            {
                mask = "Ошибка";
                message = "Неверно введен IP";
                LogWrite("Application", message, mask);
                MessageBox.Show("Неверно введен IP");
            }
            else if (res == 2)
            {
                mask = "Ошибка";
                message = "Модуль был не идентифицирован";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль был не идентифицирован");
            }
            else if (res == 3)
            {
                mask = "Ошибка";
                message = "Модуль не подтвердил принятия команды 'Старт'";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль не подтвердил принятия команды 'Старт'");
            }
        }

        /*****************************************************************/
        /*************               Stop              ******************/
        /*****************************************************************/
        private void CommonStop(object sender, RoutedEventArgs e)
        {
            // Создаем поток и запускаем в нем функцию WarmReset
            Thread StopThread = new Thread(new ThreadStart(Stop));
            StopThread.Name = "Stop";
            StopThread.Start();
        }

        private void Stop()
        {
            int res;
            string mask, message;

            res = dr.SendCommand(false, (byte)ListCommand.Stop);
            if (res == 1)
            {
                mask = "Ошибка";
                message = "Неверно введен IP";
                LogWrite("Application", message, mask);
                MessageBox.Show("Неверно введен IP");
            }
            else if (res == 2)
            {
                mask = "Ошибка";
                message = "Модуль был не идентифицирован";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль был не идентифицирован");
            }
            else if (res == 3)
            {
                mask = "Ошибка";
                message = "Модуль не подтвердил принятия команды 'Стоп'";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль не подтвердил принятия команды 'Стоп'");
            }
        }

        /*****************************************************************/
        /*************           WarmReset            ********************/
        /*****************************************************************/
        private void CommonWarmReset(object sender, RoutedEventArgs e)
        {
            // Создаем поток и запускаем в нем функцию WarmReset
            Thread WarmResetThread = new Thread(new ThreadStart(WarmReset));
            WarmResetThread.Name = "WarmReset";
            WarmResetThread.Start();
        }

        private void WarmReset()
        {
            int res;
            string mask, message;

            res = dr.SendCommand(false, (byte)ListCommand.WarmReset);
            if (res == 1)
            {
                mask = "Ошибка";
                message = "Неверно введен IP";
                LogWrite("Application", message, mask);
                MessageBox.Show("Неверно введен IP");
            }
            else if (res == 2)
            {
                mask = "Ошибка";
                message = "Модуль был не идентифицирован";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль был не идентифицирован");
            }
            else if (res == 3)
            {
                mask = "Ошибка";
                message = "Модуль не подтвердил принятия команды 'Горячий сброс'";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль не подтвердил принятия команды 'Горячий сброс'");
            }
        }

        /*****************************************************************/
        /*************           ColdReset            ********************/
        /*****************************************************************/
        private void CommonColdReset(object sender, RoutedEventArgs e)
        {
            // Создаем поток и запускаем в нем функцию ColdReset
            Thread HardResetThread = new Thread(new ThreadStart(ColdReset));
            HardResetThread.Name = "HardReset";
            HardResetThread.Start();
        }

        private void ColdReset()
        {
            int res;
            string mask, message;
            res = dr.SendCommand(false, (byte)ListCommand.ColdReset);
            if (res == 1)
            {
                mask = "Ошибка";
                message = "Неверно введен IP";
                LogWrite("Application", message, mask);
                MessageBox.Show("Неверно введен IP");
            }
            else if (res == 2)
            {
                mask = "Ошибка";
                message = "Модуль был не идентифицирован";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль был не идентифицирован");
            } 
            else if (res == 3)
            {
                mask = "Ошибка";
                message = "Модуль не подтвердил принятия команды 'Холодный сброс'";
                LogWrite("Application", message, mask);
                MessageBox.Show("Модуль не подтвердил принятия команды 'Холодный сброс'");
            }
        }

        private void MW_Closed(object sender, EventArgs e)
        {
            /*if (collect.Count() > 0)
            {
                foreach (Module p in collect)
                    p.rm.CloseThread();
            }*/
            foreach (Numeration p in Driver.modules.Values)
            {
                p.f_close = false;
            }

            foreach (List<Thread> p in Helper.dictionary_threades.Values)
            {
                foreach (Thread pp in p)
                {
                    pp.Abort();
                }
            }

            dr.forever = false;

            if (client != null)
                client.Close();
            client = null;
            if (dr != null)
                dr.DriverClose();
        }

        private void Description_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Данное приложение разработано для поверки модулей ПЛК Elecon");
        }

        private void Author_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Автор: Юшин Олег Евгеньевич\n" +
                "Должность: прграммист отдела разработки программного обеспечения ООО 'ЭлеТим'\n" +
                "Дата начала разработки: 09.08.2021");
        }

        private void Version_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Версия приложения: 0.0.0.1");
        }

        private void AppClose_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.MainWindow.Close();
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            param = new Params();
            if ((bool)param.ShowDialog())
            {
                int cnt = 0;
                foreach (s_param i in HeaderDriver._common_parameters)
                {
                    common_param.Parameter[cnt].Value = i.val.ToString();
                    cnt++;
                }

                if (int.Parse(common_param.Parameter[6].Value) == 0)
                    HeaderDriver.f_unable_infinite = true;
                else
                    HeaderDriver.f_unable_infinite = false;

                try
                {
                    using (Stream fStream = new FileStream("Descriptions_common_parameters.xml", FileMode.Create, FileAccess.Write, FileShare.None))
                    {
                        XmlSerializer serializer = new XmlSerializer(typeof(Collect));
                        serializer.Serialize(fStream, common_param);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                    Application.Current.MainWindow.Close();
                }
            }
            else
            {
                HeaderDriver._common_parameters.Clear();
                ReinitCommonParam();
            }
        }

        private void Save_Config(object sender, RoutedEventArgs e)
        {
            Module m = (Module)Tab.SelectedItem;
            if (workwithBD.WorkSaveBD(m) == 1)
            {
                string mask, message;
                mask = "Ошибка";
                message = "Запись в базу данных невозможна! Не задан заводской номер.";
                LogWrite("Application", message, mask);
                MessageBox.Show("Запись невозможна! Не задан заводской номер.");
            }
            else
            {
                string mask, message;
                mask = "Событие";
                message = "Произведена запись в базу данных";
                LogWrite("Application", message, mask);
            }
        }

        private void GS_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            RowDefinitionCollection grid = gr.RowDefinitions;
            Log.Height = grid[4].ActualHeight;
        }
    }
}
