<Window x:Class="checkmod.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Res="clr-namespace:checkmod.Properties"
        xmlns:local="clr-namespace:checkmod"
        xmlns:Validation="clr-namespace:checkmod.ValidationRules"
        xmlns:Converters="clr-namespace:checkmod.Converters"
        mc:Ignorable="d"
        Title="checkmod" Height="450" Width="800" MinWidth="250" MinHeight="200" x:Name="MW" Closed="MW_Closed">

    <Window.Resources>
        <Converters:ModuleParametersConverter x:Key="MParsConverter"/>
        <ControlTemplate x:Key="NoScroll">
            <ItemsPresenter></ItemsPresenter>
        </ControlTemplate>
        <GridLength x:Key="TreeToggleWidth">20</GridLength>
        <Converters:LevelConverter x:Key="LevelSpaceConverter" LevelWidth="{StaticResource TreeToggleWidth}"/>
        <Converters:VisibilityConverter x:Key="TreeToggleConverter"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <Style x:Key="ToggledCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">
                                    <Path x:Name="optionMark" Data="M0,4L0,6 4,6 4,10 6,10 6,6 10,6 10,4 6,4 6,0 4,0 4,4z" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="1" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <!--<Setter Property="Opacity" TargetName="optionMark" Value="0"/>-->
                                <Setter Property="Data" TargetName="optionMark" Value="M0,4L0,6 4,6 10,6 10,4 0,4z M0,10z"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                            <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderBrush" Value="#FF688CAF"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <StackPanel x:Name="DG_ScrollViewer" Focusable="false">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                </Grid>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </StackPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <Grid x:Name="gr" AllowDrop="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" Height="25" VerticalAlignment="Top" FontSize="14">
            <MenuItem Header="Команды">
                <MenuItem Header="Общие" Background="{x:Null}">
                    <MenuItem Header="Старт" Click="CommonStart">
                        <MenuItem.Icon>
                            <Image Source="start.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Стоп" Click="CommonStop">
                        <MenuItem.Icon>
                            <Image Source="Stop.png" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Header="Холодный сброс" Click="CommonColdReset">
                        <MenuItem.Icon>
                            <Image Source="ColdReset.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Горячий сброс" Click="CommonWarmReset">
                        <MenuItem.Icon>
                            <Image Source="WarmReset.png" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Выбранный модуль">
                    <MenuItem Header="Старт" Click="StartWork">
                        <MenuItem.Icon>
                            <Image Source="start.png" ></Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Стоп" Click="StopWork">
                        <MenuItem.Icon>
                            <Image Source="Stop.png" ></Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Холодный сброс" Click="ColdReset">
                        <MenuItem.Icon>
                            <Image Source="ColdReset.png" ></Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Горячий сброс" Click="WarmReset">
                        <MenuItem.Icon>
                            <Image Source="WarmReset.png" ></Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator Background="#FF303030" />
                    <MenuItem Header="Отправка конфигурации" Click="Send_Config">
                        <MenuItem.Icon>
                            <Image Source="Conf.png"  ></Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Отправка выходных данных" Click="SendData">
                        <MenuItem.Icon>
                            <Image Source="DATA.png" ></Image>
                        </MenuItem.Icon>
                    </MenuItem>

                </MenuItem>
                <MenuItem Header="Параметры приложения" Click="MenuItem_Click"></MenuItem>
                <Separator Background="#FF303030" />
                <MenuItem Header="Выход" Click="AppClose_Click"></MenuItem>
            </MenuItem>
            <MenuItem Header="О приложении" >
                <MenuItem Header="Описание" Click="Description_Click" ></MenuItem>
                <MenuItem Header="Версия" Click="Version_Click" ></MenuItem>
                <MenuItem Header="Автор" Click="Author_Click" ></MenuItem>
            </MenuItem>
        </Menu>

        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,5,0,5">

            <TextBlock Width="auto" Margin="10,0,0,0" FontSize="14" VerticalAlignment="Center">Общие команды:</TextBlock>

            <Button x:Name="StartCommonButton" Width="30" Height="30" HorizontalAlignment="Left" Margin="10,0,0,0" Click="CommonStart">
                <Image Source="start.png"></Image>
            </Button>

            
            <Button x:Name="StopCommonButton" Width="30" Height="30" HorizontalAlignment="Left" Margin="20,0,0,0" Click="CommonStop">
                <Image Source="Stop.png"></Image>
            </Button>
        </StackPanel>

        <TabControl Grid.Row="2" x:Name="Tab" HorizontalAlignment="Stretch" TabStripPlacement="Left" Background="White" BorderBrush="Transparent"
                ItemsSource="{Binding Path=collect, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Top" >
                <TabControl.ItemContainerStyle>
                    <Style TargetType="{x:Type TabItem}">
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate DataType="{x:Type local:Module}">
                                    <Border x:Name="bd" >
                                        <ContentPresenter>
                                            <ContentPresenter.Content>
                                                <TextBlock Text="{Binding Path=header, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                Background="{Binding  Path=color, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            </ContentPresenter.Content>
                                        </ContentPresenter>
                                    </Border>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <!--<Setter Property="Header" Value="{Binding Path=header, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>-->
                        <Setter Property="Content" Value="{Binding Path=pr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </Style>
                </TabControl.ItemContainerStyle>

                <TabControl.ContentTemplate>
                    <DataTemplate>
                    <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
                        <StackPanel Orientation="Vertical" >
                            <Expander x:Name="Info" Header="Information " HorizontalAlignment="Stretch" Width="auto" Background="Gainsboro"
                                    BorderBrush="Black" Margin="0,0,0,3" FontSize="14" IsExpanded="True">
                                <DataGrid ScrollViewer.CanContentScroll="False" HeadersVisibility="Column" SelectionUnit="Cell" SelectionMode="Single" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="False" HorizontalGridLinesBrush="DarkGray" RowBackground="LightGray" AlternatingRowBackground="White" AlternationCount="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" ItemsSource="{Binding Path=ident_collect, Converter={StaticResource MParsConverter}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource DataGridStyle1}">
                                    <!--<DataGrid.Columns>
                                        <DataGridTextColumn Header="Имя параметра" Binding="{Binding Path=name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                        <DataGridTextColumn Header="Значение" Binding="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    </DataGrid.Columns>-->
                                    <DataGrid.Columns>
                                        <DataGridTemplateColumn Header="{x:Static Res:Resources.NameColumnHeaderString}">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="{Binding Level, Converter={StaticResource LevelSpaceConverter}}"/>
                                                            <ColumnDefinition Width="{StaticResource TreeToggleWidth}"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                        </Grid.ColumnDefinitions>

                                                        <CheckBox Grid.Column="1" IsChecked="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding HasChildren, Converter={StaticResource TreeToggleConverter}}" Style="{StaticResource ToggledCheckBoxStyle}"/>
                                                        <TextBlock Grid.Column="2" Text="{Binding name}" ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    </Grid>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTextColumn Header="{x:Static Res:Resources.ValueColumnHeaderString}" Binding="{Binding Path=value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                            <!--<DataGridTextColumn.CellStyle>
                                                <Style>
                                                    <Setter Property="UIElement.IsEnabled" Value="{Binding IsParameterEditable, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                </Style>
                                            </DataGridTextColumn.CellStyle>-->
                                        </DataGridTextColumn>
                                        <DataGridTextColumn Header="{x:Static Res:Resources.TypeColumnHeaderString}" Binding="{Binding Path=data_type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        <DataGridTextColumn Header="{x:Static Res:Resources.DescriptionColumnHeaderString}" Binding="{Binding Path=description, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Expander>

                            <Expander x:Name="Param" IsExpanded="True" Header="Parameters " HorizontalAlignment="Stretch" Width="auto" Background="Gainsboro"
                                    BorderBrush="Black" Margin="0,0,0,3" FontSize="14">
                                <StackPanel HorizontalAlignment="Stretch" Background="White" Orientation="Vertical" >
                                    <StackPanel HorizontalAlignment="Stretch" Background="White" Orientation="Horizontal" >
                                        <Button x:Name="Conf" Click="Send_Config"  Width="40" Height="40" HorizontalAlignment="Left" Margin="10,5,0,5">
                                            <Image Source="conf.png"></Image>
                                        </Button>
                                        <Button x:Name="Save" Click="Save_Config"  Width="40" Height="40" HorizontalAlignment="Left" Margin="60,5,0,5">
                                            <Image Source="Save.png" ></Image>
                                        </Button>
                                    </StackPanel>
                                    <DataGrid ScrollViewer.CanContentScroll="False" HeadersVisibility="Column" SelectionUnit="Cell" SelectionMode="Single" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="False" HorizontalGridLinesBrush="DarkGray" RowBackground="LightGray" AlternatingRowBackground="White" AlternationCount="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" ItemsSource="{Binding Path=conf_param, Converter={StaticResource MParsConverter}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource DataGridStyle1}">

                                        <DataGrid.Columns>
                                            <DataGridTemplateColumn Header="{x:Static Res:Resources.NameColumnHeaderString}">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="{Binding Level, Converter={StaticResource LevelSpaceConverter}}"/>
                                                                <ColumnDefinition Width="{StaticResource TreeToggleWidth}"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>

                                                            <CheckBox Grid.Column="1" IsChecked="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding HasChildren, Converter={StaticResource TreeToggleConverter}}" Style="{StaticResource ToggledCheckBoxStyle}"/>
                                                            <TextBlock Grid.Column="2" Text="{Binding name}" ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                        </Grid>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                            <DataGridTemplateColumn Header="{x:Static Res:Resources.ValueColumnHeaderString}">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <TextBlock Text="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                                <DataGridTemplateColumn.CellEditingTemplate>
                                                    <DataTemplate>
                                                        <TextBox>
                                                            <TextBox.Resources>
                                                                <Validation:BindingProxy x:Key="proxy" Data="{Binding}"/>
                                                            </TextBox.Resources>
                                                            <TextBox.Text>
                                                                <Binding Path="value" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <Validation:ValidationRuleRange>
                                                                            <Validation:ValidationRuleRange.ComparisonValueMin>
                                                                                <Validation:ComparisonValue Value="{Binding Data.value_min, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.ComparisonValueMin>

                                                                            <Validation:ValidationRuleRange.ComparisonValueMax>
                                                                                <Validation:ComparisonValue Value="{Binding Data.value_max, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.ComparisonValueMax>

                                                                            <Validation:ValidationRuleRange.type>
                                                                                <Validation:ValueType type_of_value="{Binding Data.data_type, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.type>
                                                                        </Validation:ValidationRuleRange>
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </TextBox.Text>
                                                        </TextBox>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellEditingTemplate>
                                            </DataGridTemplateColumn>
                                            <DataGridTextColumn Header="{x:Static Res:Resources.TypeColumnHeaderString}" Binding="{Binding Path=data_type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <DataGridTextColumn Header="{x:Static Res:Resources.DescriptionColumnHeaderString}" Binding="{Binding Path=description, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                        </DataGrid.Columns>
                                        <!--<DataGrid.Columns>
                                            <DataGridTextColumn Header="Имя параметра" Binding="{Binding Path=name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <DataGridTemplateColumn x:Name="ValueColumn" Width="Auto" Header="{x:Static Res:Resources.IPColumnHeader}">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <TextBlock Text="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                                <DataGridTemplateColumn.CellEditingTemplate>
                                                    <DataTemplate>
                                                        <TextBox>
                                                            <TextBox.Resources>
                                                                <Validation:BindingProxy x:Key="proxy" Data="{Binding}"/>
                                                            </TextBox.Resources>
                                                            <TextBox.Text>
                                                                <Binding Path="value" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <Validation:ValidationRuleRange>
                                                                            <Validation:ValidationRuleRange.ComparisonValueMin>
                                                                                <Validation:ComparisonValue Value="{Binding Data.value_min, Source={StaticResource proxy}, Mode=TwoWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.ComparisonValueMin>

                                                                            <Validation:ValidationRuleRange.ComparisonValueMax>
                                                                                <Validation:ComparisonValue Value="{Binding Data.value_max, Source={StaticResource proxy}, Mode=TwoWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.ComparisonValueMax>

                                                                            <Validation:ValidationRuleRange.type>
                                                                                <Validation:ValueType type_of_value="{Binding Data.value_type, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                            </Validation:ValidationRuleRange.type>
                                                                        </Validation:ValidationRuleRange>
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </TextBox.Text>
                                                        </TextBox>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellEditingTemplate>
                                            </DataGridTemplateColumn>
                                        </DataGrid.Columns>-->
                                    </DataGrid>
                                </StackPanel>
                            </Expander>

                            <Expander x:Name="Sign" IsExpanded="True" Header="Signals " HorizontalAlignment="Stretch" Width="auto" Background="Gainsboro"
                                    BorderBrush="Black" FontSize="14">
                                <StackPanel HorizontalAlignment="Stretch" Background="White">
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="Status:" Width="auto" Margin="5" FontSize="14" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                                        <TextBox MinWidth="50" Margin="5" Grid.Row="0" Grid.Column="1" VerticalAlignment="Center"
                                            IsReadOnly="True" FontSize="14" Grid.ColumnSpan="2"
                                            HorizontalAlignment="Left" Text="{Binding Path=sign.stat, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                                        <Button x:Name="StartUnicast" Width="30" Height="30" HorizontalAlignment="Center" Margin="10"  Click="StartWork">
                                            <Image Source="start.png" >
                                            </Image>
                                        </Button>

                                        <Button x:Name="StopUnicast" Width="30" Height="30" HorizontalAlignment="Center" Margin="10" Click="StopWork">
                                            <Image Source="Stop.png" >
                                            </Image>
                                        </Button>

                                        <CheckBox IsChecked="{Binding Path= sign.write_sign}" Content="Включить запись сигналов в файл" VerticalAlignment="Center" Margin="10,0,0,0"/>

                                    </StackPanel>

                                    <Expander x:Name="InSign" IsExpanded="True" Header="Input Signals " HorizontalAlignment="Stretch" Width="auto" Background="Gainsboro"
                                            BorderBrush="Black" FontSize="14" Margin="1">
                                        
                                            <DataGrid ScrollViewer.CanContentScroll="False" HeadersVisibility="Column" SelectionUnit="Cell" SelectionMode="Single" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="False" HorizontalGridLinesBrush="DarkGray" RowBackground="LightGray" AlternatingRowBackground="White" AlternationCount="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" ItemsSource="{Binding Path=out_signals, Converter={StaticResource MParsConverter}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource DataGridStyle1}">
                                                <DataGrid.Columns>
                                                    <DataGridTemplateColumn Header="{x:Static Res:Resources.NameColumnHeaderString}">
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="{Binding Level, Converter={StaticResource LevelSpaceConverter}}"/>
                                                                        <ColumnDefinition Width="{StaticResource TreeToggleWidth}"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>

                                                                    <CheckBox Grid.Column="1" IsChecked="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding HasChildren, Converter={StaticResource TreeToggleConverter}}" Style="{StaticResource ToggledCheckBoxStyle}"/>
                                                                    <TextBlock Grid.Column="2" Text="{Binding name}" ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                                </Grid>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                    </DataGridTemplateColumn>
                                                    <DataGridTextColumn Header="{x:Static Res:Resources.ValueColumnHeaderString}" Binding="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                                        <!--<DataGridTextColumn.CellStyle>
                                                <Style>
                                                    <Setter Property="UIElement.IsEnabled" Value="{Binding IsParameterEditable, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                </Style>
                                            </DataGridTextColumn.CellStyle>-->
                                                    </DataGridTextColumn>
                                                    <DataGridTextColumn Header="{x:Static Res:Resources.TypeColumnHeaderString}" Binding="{Binding Path=data_type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    <DataGridTextColumn Header="{x:Static Res:Resources.DescriptionColumnHeaderString}" Binding="{Binding Path=description, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                                </DataGrid.Columns>
                                                <!--<DataGrid.Columns>
                                                    <DataGridTextColumn Header="Имя параметра" Binding="{Binding Path=name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                                    <DataGridTextColumn Header="Значение" Binding="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    <DataGridTextColumn Header="Предустоновочное" Binding="{Binding Path=tempr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                </DataGrid.Columns>-->
                                            </DataGrid>
                                        
                                    </Expander>

                                    <Expander x:Name="OutSign" IsExpanded="True" Header="Output Signals " HorizontalAlignment="Stretch" Width="auto" Background="Gainsboro"
                                            BorderBrush="Black" FontSize="14" Margin="1">
                                        <StackPanel HorizontalAlignment="Stretch" Background="White" Orientation="Vertical" >
                                            <Button x:Name="Out" Click="SendData"  Width="40" Height="40" HorizontalAlignment="Left" Margin="10,5,0,5">
                                                <Image Source="DATA.png"></Image>
                                            </Button>
                                            <DataGrid ScrollViewer.CanContentScroll="False" HeadersVisibility="Column" SelectionUnit="Cell" SelectionMode="Single" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="False" HorizontalGridLinesBrush="DarkGray" RowBackground="LightGray" AlternatingRowBackground="White" AlternationCount="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" ItemsSource="{Binding Path=in_signals, Converter={StaticResource MParsConverter}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource DataGridStyle1}">
                                                <DataGrid.Columns>
                                                    <DataGridTemplateColumn Header="{x:Static Res:Resources.NameColumnHeaderString}">
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="{Binding Level, Converter={StaticResource LevelSpaceConverter}}"/>
                                                                        <ColumnDefinition Width="{StaticResource TreeToggleWidth}"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>

                                                                    <CheckBox Grid.Column="1" IsChecked="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding HasChildren, Converter={StaticResource TreeToggleConverter}}" Style="{StaticResource ToggledCheckBoxStyle}"/>
                                                                    <TextBlock Grid.Column="2" Text="{Binding name}" ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                                </Grid>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                    </DataGridTemplateColumn>

                                                    <DataGridTextColumn Header="{x:Static Res:Resources.ValueColumnHeaderString}" Binding="{Binding Path=value, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                                       
                                                    </DataGridTextColumn>

                                                    <DataGridTemplateColumn Header="{x:Static Res:Resources.PreparedColumnHeaderString}">
                                                        <DataGridTemplateColumn.CellStyle>
                                                            <Style>
                                                                <Setter Property="UIElement.IsEnabled" Value="{Binding isEditable, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                            </Style>
                                                        </DataGridTemplateColumn.CellStyle>
                                                        <DataGridTemplateColumn.CellTemplate>
                                                            <DataTemplate>
                                                                <TextBlock Text="{Binding Path=tempr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellTemplate>
                                                        <DataGridTemplateColumn.CellEditingTemplate>
                                                            <DataTemplate>
                                                                <TextBox>
                                                                    <TextBox.Resources>
                                                                        <Validation:BindingProxy x:Key="proxy" Data="{Binding}"/>
                                                                    </TextBox.Resources>
                                                                    <TextBox.Text>
                                                                        <Binding Path="tempr" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                            <Binding.ValidationRules>
                                                                                <Validation:ValidationRuleRange>
                                                                                    <Validation:ValidationRuleRange.ComparisonValueMin>
                                                                                        <Validation:ComparisonValue Value="{Binding Data.value_min, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                                    </Validation:ValidationRuleRange.ComparisonValueMin>

                                                                                    <Validation:ValidationRuleRange.ComparisonValueMax>
                                                                                        <Validation:ComparisonValue Value="{Binding Data.value_max, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                                    </Validation:ValidationRuleRange.ComparisonValueMax>

                                                                                    <Validation:ValidationRuleRange.type>
                                                                                        <Validation:ValueType type_of_value="{Binding Data.data_type, Source={StaticResource proxy}, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource proxy}}"/>
                                                                                    </Validation:ValidationRuleRange.type>
                                                                                </Validation:ValidationRuleRange>
                                                                            </Binding.ValidationRules>
                                                                        </Binding>
                                                                    </TextBox.Text>
                                                                </TextBox>
                                                            </DataTemplate>
                                                        </DataGridTemplateColumn.CellEditingTemplate>
                                                    </DataGridTemplateColumn>
                                                    <DataGridTextColumn Header="{x:Static Res:Resources.TypeColumnHeaderString}" Binding="{Binding Path=data_type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                                    <DataGridTextColumn Header="{x:Static Res:Resources.DescriptionColumnHeaderString}" Binding="{Binding Path=description, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                                </DataGrid.Columns>
                                            </DataGrid>
                                        </StackPanel>
                                    </Expander>
                                </StackPanel>
                            </Expander>
                        </StackPanel>
                    </ScrollViewer>
                </DataTemplate>
                </TabControl.ContentTemplate>
            </TabControl>
        
        <GridSplitter x:Name="GS" Grid.Row="3" ShowsPreview="False" Height="4" HorizontalAlignment="Stretch" Background="Gainsboro" PreviewMouseLeftButtonUp="GS_PreviewMouseLeftButtonUp"/>
        <TextBox Grid.Row="4" ScrollViewer.VerticalScrollBarVisibility="Visible" x:Name="Log" BorderBrush="White" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{Binding Path=log, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsTabStop="True" TextWrapping="Wrap" IsReadOnly="True"/>
        
    </Grid>
</Window>
